group 'hankin.mykotlin'
version '1.0-SNAPSHOT'

//导出可执行程序，会在IntelliJ右边的Gradle tab栏下的Tasks目录下生成distribution目录
//双击该目录下的installDist，就可以在工程根目录下的build目录下生成install目录
//在该目录下 .\build\install\mykotlin\bin\mykotlin       文件是linux环境下的shell脚本
//          .\build\install\mykotlin\bin\mykotlin.bat   文件是window下的批处理脚本文件
//          .\build\install\mykotlin\lib    目录下的都是jar包文件
apply plugin: "application"
mainClassName = "hankin.mykotlin.operator.ComplexKt"//需要在kotlin文件名后面加上Kt

buildscript {
    //可以在settings -> plugins 里搜索查看kotlin插件版本
    ext.kotlin_version = '1.2.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        //用于解决data class定义了数据类的为final，构造函数只有带参的一个的问题
        //添加这两个插件后，data class数据类就不是final，且带无参的构造函数。但这些只是编译期的，编辑时无法找到无参构造函数，需要通过反射调用无参构造函数
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
//解决data class问题，在dependencies模块中只是将插件添加到了classpath中，这里是应用此插件，在gradle应用后最好rebuild一下项目
apply plugin: 'kotlin-noarg'
apply plugin: 'kotlin-allopen'
//应用插件后，还需要做一些配置，如果你的数据类被 @PoKo 标注后就不是final的了，且带一个无参的构造函数。可以在编辑期继承此数据类
noArg{
    annotation("hankin.mykotlin.annotations.PoKo")
}
allOpen{
    annotation("hankin.mykotlin.annotations.PoKo")
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}